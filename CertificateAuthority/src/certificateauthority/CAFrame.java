/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package certificateauthority;

import java.math.BigInteger;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.nio.charset.Charset;
import java.security.GeneralSecurityException;
import java.security.SignatureException;
import java.util.Arrays;
import java.util.List;
import java.util.Vector;
import javax.crypto.Cipher;
import javax.crypto.Mac;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import static certificateauthority.CAReceiver.PrivAttribKeyOnly;
import static certificateauthority.CAReceiver.vidOnly;

/**
 *
 * @author Elcot
 */
public class CAFrame extends javax.swing.JFrame {

    /**
     * Creates new form BVSFrame
     */
    
    String vehpublickey,vehcurrentlocation;
    String filename="",fkeys,fkeyc,ffile;
    String vehicleid;
    int index=-1;
    int caid;
    
    public CAFrame(int id) {
        initComponents();
        
        caid=id;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 102, 0));

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Certificate authority");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "RSU Id", "Fixed Location", "Distance from CA (in meters)"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 610, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RSU Details", jPanel2);

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vehicle Id", "Joined with RSU Id", "Vehicle's Current Location", "Distance from RSU (in meters)", "Public User Key"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 630, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Vehicle Details", jPanel3);

        jButton3.setText("Connect");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        String msg="Connect#"+caid;
        int port=4000;
        packetTransmission(msg,port);        
        jButton3.setEnabled(false);
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CAFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new CAFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    public javax.swing.JTable jTable1;
    public javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables

    private String decrypt(String Ekey, String privatekey) 
    {
        String[] s = privatekey.split(",");        
        String d = s[0];
        String n = s[1];
                //Decrypting, M' = C^d mod n                    
                /*Decrypting cipher*/                
        String[] cip = Ekey.split(",");
        String file = "";
        for (int i = 0; i < cip.length; i++)
        {                        
            String dec = new BigInteger(cip[i]).modPow(new BigInteger(d), new BigInteger(n)).toString();                                            
            int ascii = Integer.parseInt(dec.trim());
            char ori=(char)ascii;                    
            file = file + ori;
        }
        return file;
    }

    /*private static byte[] xor(final byte[] input, final byte[] secret) 
    {
        final byte[] output = new byte[input.length];
        if (secret.length == 0) 
        {
            throw new IllegalArgumentException("empty security key");
        }
        int spos = 0;
        for (int pos = 0; pos < input.length; ++pos) 
        {
            output[pos] = (byte) (input[pos] ^ secret[spos]);
            ++spos;
            if (spos >= secret.length) 
            {
                spos = 0;
            }
        }
        return output;
    }*/

    private String binaryString(String message) {
        String s = message;
	byte[] bytes = s.getBytes();
	StringBuilder binary = new StringBuilder();
	for (byte b : bytes)
	{
            int val = b;
            for (int i = 0; i < 8; i++)
            {
		binary.append((val & 128) == 0 ? 0 : 1);
		val <<= 1;
            }
            binary.append('@');
	}	
	String res=binary.toString();
	String bin=res.substring(0,res.lastIndexOf('@'));
	return bin;
    }

    private String xor(String msg, String key1) {
        char[] ch = msg.toCharArray();
        char[] ch1 = key1.toCharArray();
        String result = "";
        for (int i = 0; i < ch.length; i++)
        {
            if (ch[i]==ch1[i])
            {
                result = result + "0";
            }
            else
            {
                result = result + "1";
            }
        } 
	return result;
    }

    private String convertBinaryStringToString(String string) {
        StringBuilder sb = new StringBuilder();
	List<String> blocks = Arrays.asList(string.split(" "));

	for (String block:blocks)
	{
            int result=convertBlock(block);
            //System.out.println(result);
            sb.append(Character.toChars(result));
	}
	return sb.toString();
    }

    private int convertBlock(String block) {
        int [] mapping = {128,64,32,16,8,4,2,1};
	int sum = 0;
	int blockPosition= block.length()-1;
	while(blockPosition>0)
	{
            if(block.charAt(blockPosition)=='1') sum+=mapping[blockPosition];
                blockPosition--;
	}
	return sum;
    }

    private String Decrypt(String file, String ownerid) throws Exception{
        
        String key1 = ownerid;
	String key=convertFlexibleKeysize(key1);
	System.out.println("Key is "+key);
            
            //Convert string to byte array
        
	BASE64Decoder decoder = new BASE64Decoder();
	byte[] cipherbytes = decoder.decodeBuffer(file);
        
        String afterdecrypt=decrypt1(key, cipherbytes);
        return afterdecrypt;
    }

    public static String convertFlexibleKeysize(String key) throws Exception 
    {
	String validKey="";
	if(key.length()==16)
	{
            validKey=key;
	}
	else
	{			
            if(key.length()<16)
            {
		String te="1234567890123456";
		char ch[]=te.toCharArray();
		for(int i=key.length();i<ch.length;i++)
		{
                    key=key+ch[i];
		}
                validKey=key;
            }
            else
            {
		char ch1[]=key.toCharArray();
		String key1="";
		for(int i=0;i<16;i++)
		{
                    key1=key1+ch1[i];
		}
		validKey=key1;
            }
	}
	return validKey;
    }

    public static String decrypt1(String key, byte[] encrypted)
      throws GeneralSecurityException {

    byte[] raw = key.getBytes(Charset.forName("US-ASCII"));
    if (raw.length != 16) {
      throw new IllegalArgumentException("Invalid key size.");
    }
    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");

    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    cipher.init(Cipher.DECRYPT_MODE, skeySpec,
        new IvParameterSpec(new byte[16]));
    byte[] original = cipher.doFinal(encrypted);

    return new String(original, Charset.forName("US-ASCII"));
  }

    private String Encrypt(String message, String keys) throws Exception{
        String key1 = keys;
	String key=convertFlexibleKeysize(key1);
	System.out.println("Key is "+key);      
	byte[] ciphertext = encrypt1(key, message);
	  
            //Convert byte array to String
        BASE64Encoder encoder = new BASE64Encoder();
	String cipherstring = encoder.encode(ciphertext);
        return cipherstring;
    }

    public static byte[] encrypt1(String key, String value)
      throws GeneralSecurityException {

    byte[] raw = key.getBytes(Charset.forName("US-ASCII"));
    if (raw.length != 16) {
      throw new IllegalArgumentException("Invalid key size.");
    }

    SecretKeySpec skeySpec = new SecretKeySpec(raw, "AES");
    Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
    cipher.init(Cipher.ENCRYPT_MODE, skeySpec,
        new IvParameterSpec(new byte[16]));
    return cipher.doFinal(value.getBytes(Charset.forName("US-ASCII")));
  }

    private String ExclusiveOR(String keys, String serverloc) {
        String message=keys;
        String key=serverloc;
	String newmeswithkey=stringMatch(message,key);
	String sp[]=newmeswithkey.trim().split("#");
		
	String binaryMessage=binaryString(sp[0].trim());
	String binaryKey=binaryString(sp[1].trim());
		
	String bm[]=binaryMessage.split("@");
	String bk[]=binaryKey.split("@");
	
	String exor="";
	for(int i=0;i<bm.length;i++)
	{
            String msg=bm[i].trim();
            String key1=bk[i].trim();
            String exclor=xor(msg,key1);
            System.out.println("msg: "+msg);
			
            exor=exor+exclor+"@";
	}
	String exclusiveor=exor.substring(0,exor.lastIndexOf('@'));		
	return exclusiveor;
    }

    private String stringMatch(String message, String key) {
        String s=message;
	String s1=key;
	char ch[]=s.toCharArray();
	char ch1[]=s1.toCharArray();
	String news=s,news1=s1;
	if(ch.length>ch1.length)
	{
            for(int i=0;i<ch.length;i++)
            {
		if(i>=ch1.length)
		{
                    news1=news1+"0";
		}				
            }
	}
	else
	{
            for(int i=0;i<ch1.length;i++)
            {
		if(i>=ch.length)
		{
                    news=news+"0";
		}				
            }
	}
	return news+"#"+news1;
    }

    private String encrypt(String message, String e, String n) {
        String ce = "";
        char ch[]=message.toCharArray();
        for(int i=0;i<ch.length;i++)
        {
            char c=ch[i];                    
            System.out.println((int)c);                    
            BigInteger orig = BigInteger.valueOf((int)c);
            String ci = orig.modPow(new BigInteger(e), new BigInteger(n)).toString();
            ce = ce + ci + ",";
        }
        String ciphertext = ce.substring(0, ce.lastIndexOf(',')); 
        return ciphertext;
    }

    private void packetTransmission(String msg, int pt) {
        try
        {
            byte data1[]=msg.getBytes();
            DatagramSocket ds1=new DatagramSocket();
            DatagramPacket dp1=new DatagramPacket(data1,0,data1.length,InetAddress.getByName("127.0.0.1"),pt);
            ds1.send(dp1);
            System.out.println("Port is "+pt+"\n");                        
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }    
    }

    private String getPrivAttKey(String vid) {
        int index=vidOnly.indexOf(vid.trim());
        String privAttiKey=PrivAttribKeyOnly.get(index).toString().trim();
        return privAttiKey;
    }

    public static class Signature 
    {
	private static final String HMAC_SHA1_ALGORITHM = "HmacSHA1";

	public static String calculateRFC2104HMAC(String data, String key) throws java.security.SignatureException
	{
            String result;
            try 
            {
                    // get an hmac_sha1 key from the raw key bytes
		SecretKeySpec signingKey = new SecretKeySpec(key.getBytes(), HMAC_SHA1_ALGORITHM);

			// get an hmac_sha1 Mac instance and initialize with the signing key
		Mac mac = Mac.getInstance(HMAC_SHA1_ALGORITHM);
		mac.init(signingKey);

			// compute the hmac on input data bytes
		byte[] rawHmac = mac.doFinal(data.getBytes());

			// base64-encode the hmac
			//result = Encoding.EncodeBase64(rawHmac);
		result = new String(encode(rawHmac));
            }
            catch (Exception e) 
            {
		throw new SignatureException("Failed to generate HMAC : " + e.getMessage());
            }
            return result;
	}
		
	private static char[] encode(byte[] bytes) 
        {
            final int amount = bytes.length;
            char[] result = new char[2 * amount];

            int j = 0;
            for (int i = 0; i < amount; i++) 
            {
                result[j++] = HEX[(0xF0 & bytes[i]) >>> 4];
                result[j++] = HEX[(0x0F & bytes[i])];
            }
            return result;
        }

        private static final char[] HEX = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'};
    }
}
